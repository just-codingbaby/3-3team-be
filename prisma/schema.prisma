generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  nickName      String         @unique @db.VarChar(50)
  password      String         @db.VarChar(255)
  email         String?        @unique @db.VarChar(100)
  points        Int?           @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cards         Card[]
  exchanges     Exchange[]     @relation("Requester")
  notifications Notification[]
  purchases     Purchase[]
  shops         Shop[]         @relation("Seller")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Card {
  id                Int        @id @default(autoincrement())
  ownerId           Int
  name              String     @db.VarChar(100)
  price             Int
  grade             String     @db.VarChar(20)
  genre             String     @db.VarChar(20)
  description       String?
  totalQuantity     Int
  remainingQuantity Int
  createdAt         DateTime   @default(now())
  imgUrl            String     @db.VarChar(200)
  updatedAt         DateTime   @updatedAt
  owner             User       @relation(fields: [ownerId], references: [id])
  exchangesOffered  Exchange[] @relation("OfferedCard")
  exchangesTarget   Exchange[] @relation("TargetCard")
  purchases         Purchase[]
  shops             Shop[]
}

model Purchase {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  cardId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyer     User     @relation(fields: [buyerId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
}

model Exchange {
  id            Int      @id @default(autoincrement())
  requesterId   Int
  targetCardId  Int
  offeredCardId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  offeredCard   Card     @relation("OfferedCard", fields: [offeredCardId], references: [id])
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
  targetCard    Card     @relation("TargetCard", fields: [targetCardId], references: [id])
}

model Shop {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  cardId    Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id])
  seller    User     @relation("Seller", fields: [sellerId], references: [id])
}
