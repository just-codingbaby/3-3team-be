generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  nickName      String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  email         String?        @unique @db.VarChar(255)
  points        Int?           @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  cards         Card[]
  exchanges     Exchange[]     @relation("Requester")
  purchases     Purchase[]
  shops         Shop[]         @relation("Seller")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum Grade {
  COMMON
  RARE
  SUPER_RARE
  LEGENDARY
}

enum Genre {
  TRAVEL
  LANDSCAPE
  PORTRAIT
  OBJECT
}

enum CardStatus {
  CREATED // 등록
  FOR_SALE // 판매중
  FOR_TRADING // 교환대기중
  SOLD_OUT // 판매완료
  ON_TRADING // 교환제시중
}

model Card {
  id                Int         @id @default(autoincrement())
  ownerId           Int
  name              String      @db.VarChar(255)
  price             Int
  grade             Grade
  genre             Genre
  description       String?
  totalQuantity     Int
  remainingQuantity Int
  imgUrl            String      @db.Text
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  status            CardStatus? @default(CREATED)
  owner             User        @relation(fields: [ownerId], references: [id])
  purchases         Purchase[]
  exchangesTarget   Exchange[]  @relation("TargetCard")
  exchangesOffered  Exchange[]  @relation("OfferedCard")
  shops             Shop[]
}

model Purchase {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  cardId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyer     User     @relation(fields: [buyerId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
}

model Exchange {
  id            Int      @id @default(autoincrement())
  requesterId   Int
  targetCardId  Int
  offeredCardId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  offeredCard   Card     @relation("OfferedCard", fields: [offeredCardId], references: [id])
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
  targetCard    Card     @relation("TargetCard", fields: [targetCardId], references: [id])
}

model Shop {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  cardId    Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id])
  seller    User     @relation("Seller", fields: [sellerId], references: [id])
}